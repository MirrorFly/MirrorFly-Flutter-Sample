// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyCall
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import CallKit
import CommonCrypto
import Contacts
@_exported import FlyCall
import FlyCommon
import Foundation
@_exported import RealmSwift
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
public enum ARDSignalingChannelState : Swift.Int {
  case kARDSignalingChannelStateClosed
  case kARDSignalingChannelStateOpen
  case kARDSignalingChannelStateCreate
  case kARDSignalingChannelStateAttach
  case kARDSignalingChannelStateJoin
  case kARDSignalingChannelStateOffer
  case kARDSignalingChannelStateError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CallDirection {
  case Incoming
  case Outgoing
  public static func == (a: FlyCall.CallDirection, b: FlyCall.CallDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallType : Swift.String {
  case Audio
  case Video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CallMode : Swift.String {
  case ONE_TO_ONE
  case ONE_TO_MANY
  case MANY_TO_MANY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class NotificationExtensionSupport : ObjectiveC.NSObject {
  public typealias pushReturnBlock = (UserNotifications.UNMutableNotificationContent?) -> Swift.Void
  public static let shared: FlyCall.NotificationExtensionSupport
  @objc public func didReceiveNotificationRequest(_ bestContent: UserNotifications.UNMutableNotificationContent?, appName: Swift.String, onCompletion: @escaping FlyCall.NotificationExtensionSupport.pushReturnBlock)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CallDefaults {
  @FlyCall.SDKDefaults public static var pingTime: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var timeDifference: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var myId: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var roomId: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var signalUrl: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var janusUrl: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var baseUrl: Swift.String {
    get
    set
    _modify
  }
  @FlyCall.SDKDefaults public static var isDBMigrationDone: Swift.Bool {
    get
    set
    _modify
  }
  public static func clearAlCallDefaults()
  @objc deinit
}
@propertyWrapper public struct SDKDefaults<T> where T : Swift.Decodable, T : Swift.Encodable {
  public var wrappedValue: T {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers public class PeerConnectionClient : ObjectiveC.NSObject {
  @objc deinit
}
extension FlyCall.PeerConnectionClient : WebRTC.RTCPeerConnectionDelegate {
  @objc dynamic public func peerConnectionShouldNegotiate(_ peerConnection: WebRTC.RTCPeerConnection)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didStartReceivingOn transceiver: WebRTC.RTCRtpTransceiver)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd rtpReceiver: WebRTC.RTCRtpReceiver, streams mediaStreams: [WebRTC.RTCMediaStream])
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange stateChanged: WebRTC.RTCSignalingState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceGatheringState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didGenerate candidate: WebRTC.RTCIceCandidate)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove candidates: [WebRTC.RTCIceCandidate])
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didOpen dataChannel: WebRTC.RTCDataChannel)
}
@_hasMissingDesignatedInitializers public class AudioManager {
  public class func shared() -> FlyCall.AudioManager
  public var audioManagerDelegate: FlyCall.AudioManagerDelegate?
  public func routeToAvailableDevice(preferredDevice: FlyCall.OutputType? = nil)
  public func getCurrentAudioInput()
  public func getAllAvailableAudioInput() -> [FlyCall.AudioDevice]
  public func routeAudioTo(device: FlyCall.OutputType, force: Swift.Bool = false)
  @objc deinit
}
public protocol AudioManagerDelegate {
  func audioRoutedTo(deviceName: Swift.String, audioDeviceType: FlyCall.OutputType)
}
public protocol JoinCallDelegate {
  func onUsersUpdated(usersList: [Swift.String])
  func onLocalTrack(videoTrack: WebRTC.RTCVideoTrack?)
  func onError(reason: Swift.String)
}
public enum CallAction : Swift.String {
  case ACTION_INVITE_USERS
  case ACTION_SHOW_CALL_UI
  case ACTION_ANSWER_CALL
  case ACTION_DENY_CALL
  case ACTION_LOCAL_HANGUP
  case ACTION_REMOTE_HANGUP
  case ACTION_REMOTE_CHANGE_STATUS
  case ACTION_REMOTE_OTHER_BUSY
  case ACTION_REMOTE_BUSY
  case ACTION_REMOTE_ENGAGED
  case ACTION_CALL_AGAIN
  case ACTION_CANCEL_CALL_AGAIN
  case ACTION_SWITCH_CAMERA
  case ACTION_REMOTE_VIDEO_STATUS
  case ACTION_VIDEO_CALL_CONVERSION
  case CHANGE_TO_AUDIO_CALL
  case ACTION_VIDEO_CALL_CANCEL_CONVERSION
  case ACTION_VIDEO_CALL_CONVERSION_ACCEPTED
  case ACTION_VIDEO_CALL_CONVERSION_REJECTED
  case ACTION_REMOTE_VIDEO_ADDED
  case ACTION_AUDIO_DEVICE_CHANGED
  case ACTION_CAMERA_SWITCH_DONE
  case ACTION_PERMISSION_DENIED
  case CALL_REQUEST_RESPONSE
  case INCOMING_ACTION_PERMISSION_DENIED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CallState : Swift.String {
  case IncomingCall
  case OutgoingCall
  case MissedCall
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CallLog {
  public let callLogId: Swift.String
  public let fromUserId: Swift.String
  public let toUserId: Swift.String
  public var callType: FlyCall.CallType
  public var callReceivedTime: Swift.Double
  public var callAttendedTime: Swift.Double
  public var callEndedTime: Swift.Double
  public var callState: FlyCall.CallState
  public var callMode: FlyCall.CallMode
  public var userList: [Swift.String]
  public var groupId: Swift.String?
  public var customData: Swift.String?
  public var isLogSynced: Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class CallParticipantsStatus : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ikDelegate {
}
@objc @_inheritsConvenienceInitializers public class VOIPManager : ObjectiveC.NSObject {
  @objc public static var sharedInstance: FlyCall.VOIPManager
  public func saveAPNSToken(token: Swift.String)
  public func saveVOIPToken(token: Swift.String)
  public func updateDeviceToken()
  public func refreshToken(onCompletion: @escaping (_ isSuccess: Swift.Bool) -> Swift.Void)
  @objc public func processPayload(_ userInfo: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
public protocol FlyCallControllerDelegate : ObjectiveC.NSObjectProtocol {
}
@objc @_inheritsConvenienceInitializers public class FlyCallController : ObjectiveC.NSObject {
  public var delegate: FlyCall.FlyCallControllerDelegate?
  @objc override dynamic public init()
  @objc deinit
}
public struct AudioDevice {
  public var name: Swift.String
  public var id: Swift.String
  public var type: FlyCall.OutputType
}
public enum OutputType {
  case receiver
  case speaker
  case headset
  case bluetooth
  public static func == (a: FlyCall.OutputType, b: FlyCall.OutputType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MuteEvent {
  case ACTION_REMOTE_VIDEO_MUTE
  case ACTION_REMOTE_VIDEO_UN_MUTE
  case ACTION_REMOTE_AUDIO_MUTE
  case ACTION_REMOTE_AUDIO_UN_MUTE
  case ACTION_LOCAL_AUDIO_MUTE
  case ACTION_LOCAL_AUDIO_UN_MUTE
  public static func == (a: FlyCall.MuteEvent, b: FlyCall.MuteEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CALLSTATUS : Swift.String {
  case CONNECTING
  case RINGING
  case ATTENDED
  case CONNECTED
  case DISCONNECTED
  case ON_HOLD
  case ON_RESUME
  case USER_JOINED
  case USER_LEFT
  case INVITE_CALL_TIME_OUT
  case CALL_TIME_OUT
  case RECONNECTING
  case RECONNECTED
  case CALLING
  case CALLING_10S
  case CALLING_AFTER_10S
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol MobileCallActionDelegate {
  func whileIncoming()
  func didCallAnswered()
  func whileDialing()
  func didCallDisconnected()
}
public protocol CallManagerDelegate {
  func getDisplayName(IncomingUser: [Swift.String])
  func getGroupName(_ groupId: Swift.String)
  func sendCallMessage(groupCallDetails: FlyCommon.GroupCallDetails, users: [Swift.String], invitedUsers: [Swift.String])
  func socketConnectionEstablished()
  func onCallStatusUpdated(callStatus: FlyCall.CALLSTATUS, userId: Swift.String)
  func onCallAction(callAction: FlyCall.CallAction, userId: Swift.String)
  func onLocalVideoTrackAdded(userId: Swift.String)
  func onMuteStatusUpdated(muteEvent: FlyCall.MuteEvent, userId: Swift.String)
  func onUserSpeaking(userId: Swift.String, audioLevel: Swift.Int)
  func onUserStoppedSpeaking(userId: Swift.String)
}
public protocol FeaturesDelegate {
  func validateAvailableFeature() -> FlyCommon.AvailableFeaturesModel
}
@objc @_inheritsConvenienceInitializers public class CallManager : ObjectiveC.NSObject {
  public static var delegate: FlyCall.CallManagerDelegate?
  public static var featuresDelegate: FlyCall.FeaturesDelegate?
  public static var isCallStarted: Swift.Bool
  public static var incomingUserJidArr: [Swift.String]
  @objc override dynamic public init()
  public class func initCallSDK() throws
  public class func setVideoWidthHeightAdjuster(videoWidthHeightAdjuster: FlyCall.VideoWidthHeightAdjuster)
  public class func getRoomLink() -> Swift.String
  public class func setMyInfo(name: Swift.String, imageUrl: Swift.String)
  public class func setCurrentUserId(_ myID: Swift.String)
  public class func setSignalServerUrl(_ signalSeverUrl: Swift.String)
  public class func setJanusWebSocketServerUrl(_ websocketSeverUrl: Swift.String)
  public class func setIceServers(_ iceServersList: [WebRTC.RTCIceServer])
  public class func setCallViewController(_ callUIController: UIKit.UIViewController)
  public class func setCallEventsDelegate(delegate: FlyCall.CallManagerDelegate?)
  public class func setMobileCallActionDelegate(delegate: FlyCall.MobileCallActionDelegate?)
  public class func disconnectCall()
  public class func setViewToPresentController(rootViewController: UIKit.UIViewController)
  public class func getViewControllerThatPresented() -> UIKit.UIViewController?
  public class func isRemoteAudioMuted(_ userId: Swift.String) -> Swift.Bool
  public class func isRemoteVideoMuted(_ userId: Swift.String) -> Swift.Bool
  @objc public class func setAppGroupContainerId(id: Swift.String)
  public class func switchCamera()
  public class func requestVideoCallSwitch(onCompletion: @escaping (Swift.Bool) -> Swift.Void)
  public class func cancelVideoCallSwitch()
  public class func isCallConversionRequestAvailable() -> Swift.Bool
  public class func acceptVideoCallSwitchRequest()
  public class func declineVideoCallSwitchRequest()
  public class func enableVideo()
  public class func processCallStatus(userId: Swift.String, callStatus: FlyCall.CALLSTATUS)
  public class func getCallType() -> FlyCall.CallType
  public class func setCallType(callType: FlyCall.CallType)
  public class func getCallMode() -> FlyCall.CallMode
  public class func getCallDirection() -> FlyCall.CallDirection
  public class func getAvailableCallUsersList() -> [Swift.String]?
  public class func getCallUsersList() -> [Swift.String]?
  public class func getAllCallUsersList() -> [Swift.String]
  public class func getCallUsersWithStatus() -> [Swift.String : FlyCall.CALLSTATUS]
  public class func getCallConnectedUsersList() -> [Swift.String]?
  public class func getCallAttendedUsersList() -> [Swift.String]
  public class func getRingingStatusUserList() -> [Swift.String]
  public class func getGroupID() -> Swift.String?
  public class func isOneToOneCall() -> Swift.Bool
  public class func isOneToOneCallUINeedToShow() -> Swift.Bool
  public class func getTimeOutUsersList() -> [Swift.String]?
  public class func getReconnectingUsersList() -> [Swift.String]?
  public class func getCallStatus(userId: Swift.String) -> FlyCall.CALLSTATUS?
  public class func getUserName(userId: Swift.String) -> Swift.String
  public class func isAlreadyOnAnotherCall() -> Swift.Bool
  public class func getLocalUserId() -> Swift.String?
  public class func isCallOnHold() -> Swift.Bool
  public class func setIsCallOnHold(isCallOnHold: Swift.Bool)
  public class func getCallerId() -> Swift.String?
  public class func setCallerId(callerJid: Swift.String)
  public class func getEndCallerId() -> Swift.String?
  public class func isCallConnected() -> Swift.Bool
  public class func isAudioCallPermissionsGranted() -> Swift.Bool
  public class func isVideoCallPermissionsGranted() -> Swift.Bool
  public class func initiateRingingTimer()
  public func initiateReconnectingTimer()
  @objc public class func callRingingStatusWaiting(_ timer: Foundation.Timer)
  @objc deinit
}
extension FlyCall.CallManager {
  public class func makeVoiceCall(_ userId: Swift.String, onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void) throws
  public class func makeVideoCall(_ userId: Swift.String, onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void) throws
  public class func makeGroupVoiceCall(_ userIDsList: [Swift.String], groupID: Swift.String, onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void) throws
  public class func makeGroupVideoCall(_ userIDsList: [Swift.String], groupID: Swift.String, onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void) throws
  @available(*, deprecated, message: "Use the CallManager.inviteUsersToOngoingCall(_ userIDsList : [String], onCompletion: @escaping (_ isSuccess: Bool, _ message: String) -> Void) instead")
  public class func inviteUsersToOngoingCall(_ userIDsList: [Swift.String])
  public class func inviteUsersToOngoingCall(_ userIDsList: [Swift.String], onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void)
  public class func muteAudio(_ isMute: Swift.Bool)
  public class func getContactNames(IncomingUserName: [Swift.String])
  public class func muteVideo(_ isMute: Swift.Bool)
  public class func isVideoMuted() -> Swift.Bool
  public class func getMuteStatus(jid: Swift.String, isAudioStatus: Swift.Bool) -> Swift.Bool
  public class func isAudioMuted() -> Swift.Bool
  public class func getRemoteVideoTrack(jid: Swift.String) -> WebRTC.RTCVideoTrack?
  @objc dynamic public class func isOngoingCall() -> Swift.Bool
  @objc dynamic public class func checkForActiveCall() -> Swift.Bool
}
extension FlyCall.CallManager {
  public class func startVideoCapture()
  public class func setJoinCallDelegate(delegate: FlyCall.JoinCallDelegate)
  public class func subscribeToCallEvents(link: Swift.String, name: Swift.String, completion: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  public class func cleanUpJoinCallViaLink()
  public class func joinCall()
  public class func getCallLink() -> Swift.String?
  public class func isCurrentCallJoinedViaLink() -> Swift.Bool
  public class func isUserJoinedViaLink(userId: Swift.String) -> Swift.Bool
}
public protocol VideoWidthHeightAdjuster {
  func getVideoHeightConstraint(usersCount: Swift.Int) -> Swift.Int
  func getVideoWidthConstraint(usersCount: Swift.Int) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers public class CallPayload : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CallLogManager : ObjectiveC.NSObject {
  public class func getAllCallLogs() -> [FlyCall.CallLog]
  public func deleteCallLogs()
  public func updatecallLog(callLogs: [Any])
  public class func getMissedCallCount() -> Swift.Int
  public func deleteCallLog(callLogId: Swift.String? = nil, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func getCallLogs(pageNumber: Swift.Int, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func syncCallLogs(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
@objcMembers public class CallSDK {
  public static let Builder: FlyCall.CallSDK
  public func setUserId(id: Swift.String) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func setDomainBaseUrl(baseUrl: Swift.String) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func setSignalSeverUrl(url: Swift.String) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func setJanusSeverUrl(url: Swift.String) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func setAppGroupContainerID(containerID: Swift.String) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Call CallManager.setCallViewController() to setViewController")
  public func setCallViewController(viewController: UIKit.UIViewController) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func setICEServersList(iceServers: [WebRTC.RTCIceServer]) -> FlyCall.CallSDK
  @available(*, deprecated, message: "Call CallManager.setCallEventsDelegate() to observe Call Events")
  public func setCallDelegate(delegate: FlyCall.CallManagerDelegate) -> FlyCall.CallSDK
  @objc @available(*, deprecated, message: "Handled internally from this release. Call CallManager.initCallSDK() to initialize CallSDK")
  public func buildAndInitialize() throws
  @objc deinit
}
public enum FlyCallError : Swift.Error {
  case invalid_input
  public static func == (a: FlyCall.FlyCallError, b: FlyCall.FlyCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FlyCallUtils : ObjectiveC.NSObject {
  public static let klExistingTokenAPNS: Swift.String
  public static let klExistingTokenVOIP: Swift.String
  public static var sharedInstance: FlyCall.FlyCallUtils
  public static func generateTimestamp() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension FlyCall.FlyCallUtils {
  public func setConfigUserDefaults(_ value: Swift.String, withKey key: Swift.String)
  public func getConfigUserDefault(forKey key: Swift.String) -> Swift.String?
}
extension FlyCall.ARDSignalingChannelState : Swift.Equatable {}
extension FlyCall.ARDSignalingChannelState : Swift.Hashable {}
extension FlyCall.ARDSignalingChannelState : Swift.RawRepresentable {}
extension FlyCall.CallDirection : Swift.Equatable {}
extension FlyCall.CallDirection : Swift.Hashable {}
extension FlyCall.CallType : Swift.Equatable {}
extension FlyCall.CallType : Swift.Hashable {}
extension FlyCall.CallType : Swift.RawRepresentable {}
extension FlyCall.CallMode : Swift.Equatable {}
extension FlyCall.CallMode : Swift.Hashable {}
extension FlyCall.CallMode : Swift.RawRepresentable {}
extension FlyCall.CallAction : Swift.Equatable {}
extension FlyCall.CallAction : Swift.Hashable {}
extension FlyCall.CallAction : Swift.RawRepresentable {}
extension FlyCall.CallState : Swift.Equatable {}
extension FlyCall.CallState : Swift.Hashable {}
extension FlyCall.CallState : Swift.RawRepresentable {}
extension FlyCall.OutputType : Swift.Equatable {}
extension FlyCall.OutputType : Swift.Hashable {}
extension FlyCall.MuteEvent : Swift.Equatable {}
extension FlyCall.MuteEvent : Swift.Hashable {}
extension FlyCall.CALLSTATUS : Swift.Equatable {}
extension FlyCall.CALLSTATUS : Swift.Hashable {}
extension FlyCall.CALLSTATUS : Swift.RawRepresentable {}
extension FlyCall.FlyCallError : Swift.Equatable {}
extension FlyCall.FlyCallError : Swift.Hashable {}

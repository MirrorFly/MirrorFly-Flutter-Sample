// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyXmpp
// swift-module-flags-ignorable: -enable-bare-slash-regex
import FlyCommon
@_exported import FlyXmpp
import Foundation
import Swift
import UIKit
import UserNotifications
@_exported import XMPPFramework
import _Concurrency
import _StringProcessing
public struct XmppUtils {
  public static func generateMyXmppResource()
  public static func getMyXMPPJID() -> XMPPFramework.XMPPJID
}
public protocol XMPPMessageDelegate : ObjectiveC.NSObjectProtocol {
  func didReciveSingleChatCorbonMessage(messageId: Swift.String, from: Swift.String, to: Swift.String, body: Swift.String, time: Swift.String) -> Swift.String
  func didReceivedSingleChatMessage(messageId: Swift.String, from: Swift.String, body: Swift.String, time: Swift.String, groupJid: Swift.String) -> Swift.String
  func didReceiveGroupChatMessage(messageId: Swift.String, from: Swift.String, groupJid: Swift.String, body: Swift.String, time: Swift.String)
  func onSentMessageStatusUpdated(from: Swift.String, messageId: Swift.String, updateType: FlyCommon.MessageStatus, time: Swift.String?)
  func onReceivedMessageStatusUpdated(toJid: Swift.String, messageId: Swift.String, updateType: FlyCommon.MessageStatus)
  func onMessagesCleared(toJid: Swift.String?, favourite: Swift.String?, deleteType: Swift.String?)
  func onMessagesClearedOrDeleted(messageIds: Swift.Array<Swift.String>)
  func onMessagesDeletedforEveryone(messageIds: Swift.Array<Swift.String>)
  func setOrUpdateFavourite(messageId: Swift.String, favourite: Swift.Bool, removeAllFavourite: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc public class NotificationMessageSupport : ObjectiveC.NSObject {
  public typealias pushReturnBlock = (UserNotifications.UNMutableNotificationContent?) -> Swift.Void
  public static let shared: FlyXmpp.NotificationMessageSupport
  @objc public func didReceiveNotificationRequest(_ bestContent: UserNotifications.UNMutableNotificationContent?, onCompletion: @escaping FlyXmpp.NotificationMessageSupport.pushReturnBlock)
  public func handleAdminBlockNotification(_ bestContent: UserNotifications.UNMutableNotificationContent?, onCompletion: @escaping FlyXmpp.NotificationMessageSupport.pushReturnBlock)
  @objc override dynamic public init()
  @objc deinit
}
public protocol XMPPTypingStatusDelegate : ObjectiveC.NSObjectProtocol {
  func onChatTypingStatusChanged(userJid: Swift.String, status: FlyCommon.TypingStatus)
  func onGroupChatTypingStatusChanged(groupJid: Swift.String, userJid: Swift.String, status: FlyCommon.TypingStatus)
}
public protocol XMPPAdminBlockDelegate : ObjectiveC.NSObjectProtocol {
  func didBlock(adminBlock: FlyCommon.AdminBlock?)
}
public protocol XMPPArchiveDelegate : ObjectiveC.NSObjectProtocol {
  func updateArchiveUnArchiveChats(toUser: Swift.String, archiveStatus: Swift.Bool)
  func updateArchivedSettings(archivedSettingsStatus: Swift.Bool)
}
public protocol XMPPGroupDelegate : ObjectiveC.NSObjectProtocol {
  func didReceiveUseraddedMessage(participantProfile: FlyCommon.ProfileDetails, publisherProfile: FlyCommon.ProfileDetails, groupMemberDetail: FlyCommon.GroupParticipantDetail, isFromPush: Swift.Bool)
  func didAddParticipantSuccessMessage(addParticipantmessage: Swift.String)
  func didAdminRemoveParticipant(message: Swift.String)
  func didAdminRemoveParticipantReceiveMessage(removedParticipant: FlyCommon.ParticipantDetails)
  func didGroupUserProfileFetch(for jid: Swift.String, groupInfoDetails: FlyCommon.GroupModel?)
  func didGroupProfileFetch(groupJid: Swift.String)
  func didGroupInfoProfileUpdated(message: Swift.String)
  func didMakeAdmin(message: Swift.String)
  func didGroupInfoUpdatedMessage(groupDetail: FlyCommon.ParticipantDetails)
  func didMakeAdminMessage(participantDetail: FlyCommon.ParticipantDetails)
  func didExitFromGroup(message: Swift.String)
  func didDeleteFromGroup(message: Swift.String)
  func didReceiveGroupDeleteMessage(groupJid: Swift.String, messageFrom: Swift.String)
  func didGroupDeleteLocally(groupJid: Swift.String)
  func didReceiveParticipantMessage(participantDetails: [FlyCommon.ProfileDetails], groupDetails: FlyCommon.GroupModel)
  func didGetParticipant(participantDetails: [FlyCommon.ProfileDetails], groupDetails: FlyCommon.GroupModel)
  func didReceiveParticipantForGroupId(groupJid: Swift.String)
  func didGroupCreate(message: Swift.String)
  func didGetGroups(groups: [FlyCommon.ProfileDetails], message: Swift.String)
}
public protocol XMPPConnectionDelegate : ObjectiveC.NSObjectProtocol {
  func xmppDidConnected()
  func xmppDidAuthorized()
  func xmppDidNotAuthorized()
  func xmppDidDisconnected()
}
public protocol XMPPProfileDelegate : ObjectiveC.NSObjectProtocol {
  func userCameOnline(for jid: Swift.String)
  func userWentOffline(for jid: Swift.String)
  func userProfileFetched(for jid: Swift.String, profileDetails: FlyCommon.ProfileDetails?)
  func usersProfilesFetched()
  func blockedThisUser(jid: Swift.String)
  func unblockedThisUser(jid: Swift.String)
  func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: FlyCommon.ProfileDetails)
  func userBlockedMe(jid: Swift.String)
  func userUnBlockedMe(jid: Swift.String)
  func usersIBlockedListFetched(jidList: [Swift.String])
  func usersBlockedMeListFetched(jidList: [Swift.String])
  func hideUserLastSeen()
  func getUserLastSeen()
  func userDeletedTheirAccount(jid: Swift.String)
  func userRegisterUpdate(jid: Swift.String)
}
public protocol FlyXmppControllerDelegate : ObjectiveC.NSObjectProtocol {
  func processPushMessage(_ userInfo: [Swift.AnyHashable : Any]?, completionHandler: @escaping (Swift.String, Swift.String, Swift.String, Swift.String) -> Swift.Void)
  func processGroupPushMessage(_ userInfo: [Swift.AnyHashable : Any]?) -> Swift.String
  func processAdminBlockPushMessage(userJid: Swift.String, blockStatus: Swift.String) -> Swift.String
  func processDeleteMessagePushMessage(messageIds: [Swift.String]) -> (Swift.String, Swift.String, Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FlyXmppController : ObjectiveC.NSObject {
  public var delegate: FlyXmpp.FlyXmppControllerDelegate?
  public static var shared: FlyXmpp.FlyXmppController
  public func setMessageDelegate(xmppMessageDelegate: FlyXmpp.XMPPMessageDelegate)
  public func setProfileDelegate(xmppProfileDelegate: FlyXmpp.XMPPProfileDelegate)
  public func setGroupDelegate(xmppGroupDelegate: FlyXmpp.XMPPGroupDelegate)
  public func setConnectionDelegate(xmmpConnectionDelegate: FlyXmpp.XMPPConnectionDelegate)
  public func setTypingDelegate(xmppTypingDelegate: FlyXmpp.XMPPTypingStatusDelegate)
  public func setWebLogoutDelegate(webLogoutDelegate: FlyXmpp.XMPPWebLogoutDelegate)
  public func setAdminBlockDelegate(adminBlockDelegate: FlyXmpp.XMPPAdminBlockDelegate)
  public func setLogoutDelegate(logoutDelegate: FlyXmpp.XMPPLogoutDelegate)
  public func setArchiveDelegate(archiveDelegate: FlyXmpp.XMPPArchiveDelegate)
  public func connect()
  public func disConnect()
  public func isXmppAuthenticated() -> Swift.Bool
  public func disableReconnection()
  public func sendSingleChatMessageToServer(toJid: Swift.String, messageId: Swift.String, content: Swift.String, messageType: Swift.String)
  public func sendGroupChatMessageToServer(toJid: Swift.String, messageId: Swift.String, content: Swift.String, messageType: Swift.String)
  public func sendDeliveredMessageToServer(toJid: Swift.String, messageId: Swift.String)
  public func sendDeliveredMessageForGroupToServer(toJid: Swift.String, messageId: Swift.String, groupId: Swift.String)
  public func sendSeenMessageForGroupToServer(toJid: Swift.String, messageId: Swift.String, groupJid: Swift.String)
  public func sendSeenMessageToServer(toJid: Swift.String, messageId: Swift.String)
  public func processGroupPushPayload(_ userInfo: [Swift.AnyHashable : Any]?) -> Swift.String
  public func processAdminBlockPayload(_ userInfo: [Swift.AnyHashable : Any]?) -> Swift.String
  @objc deinit
}
extension FlyXmpp.FlyXmppController {
  public func getProfile(jid: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getGroupProfileInfo(groupJid: Swift.String, groupId: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getGroups(callback: @escaping FlyCommon.FlyCompletionHandler)
  public func setGroupProfileInfo(profile: FlyCommon.ProfileDetails, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func blockUser(jid: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func unblockUser(jid: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func clearChat(toJid: Swift.String, chatType: FlyCommon.ChatType, clearChatExceptStarred: Swift.Bool, deleteType: Swift.Int, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func clearAllConversation(deleteType: Swift.Int, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func addFavourite(messageId: Swift.String, chatUserId: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func updateFavourite(messageId: Swift.String, chatUserId: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func unFavouriteAllFavouriteMessages(callback: @escaping FlyCommon.FlyCompletionHandler)
  public func deleteMessagesForMe(toJid: Swift.String, messageIdList: [Swift.String], deleteChatType: FlyCommon.ChatType, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func deleteMessagesForEveryone(toJid: Swift.String, messageIdList: [Swift.String], deleteChatType: FlyCommon.ChatType, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getUsersIBlocked(callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getUsersWhoBlockedMe(callback: @escaping FlyCommon.FlyCompletionHandler)
  public func updateMyProfile(flyProfile: FlyCommon.FlyProfile, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getRoster(callback: @escaping FlyCommon.FlyCompletionHandler)
  public func hideUserLastSeen(mode: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getUserLastSeen(Jid: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func sendChatStates(toJid: Swift.String, chatType: FlyCommon.ChatType, status: Swift.String)
  public func sendGroupChatStates(toJid: Swift.String, chatType: FlyCommon.ChatType, status: Swift.String)
  public func createGroup(groupName: Swift.String, participantJidList: [Swift.String], groupImageId: Swift.String, groupId: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func addParticipantToGroup(groupName: Swift.String, groupID: Swift.String, participantsArray: [Swift.String], callback: @escaping FlyCommon.FlyCompletionHandler)
  public func removeGroupParticipant(groupID: Swift.String, removeParticipant: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func makeAdminIQ(groupJID: Swift.String, userJID: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func sendDeleteGroupIQ(groupJID: Swift.String, userJID: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func exitParticipantFromGroup(groupJID: Swift.String, userJID: Swift.String, status: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func getParticipant(groupJID: Swift.String, callback: FlyCommon.FlyCompletionHandler? = nil)
  public func archiveUnarchiveChat(jid: Swift.String, status: Swift.Bool, callback: FlyCommon.FlyCompletionHandler? = nil)
  public func getArchivedChatList(callback: FlyCommon.FlyCompletionHandler? = nil)
  public func enableDisablearchiveChat(status: Swift.Bool, callback: FlyCommon.FlyCompletionHandler? = nil)
  public func getArchivedSettingsStatus(callback: FlyCommon.FlyCompletionHandler? = nil)
  public func sendCallMessage(for status: Swift.String, roomId: Swift.String, groupId: Swift.String, callType: Swift.String, callMode: Swift.String, callTime: Swift.String, startTime: Swift.String, endTime: Swift.String, callStatus: Swift.String, callFrom: Swift.String, users: [Swift.String], inviteUsers: [Swift.String], callback: @escaping FlyCommon.FlyCompletionHandler)
  public func sendWebLogout(socketId: Swift.String, callback: @escaping FlyCommon.FlyCompletionHandler)
  public func sendRegisterUpdate(callback: @escaping FlyCommon.FlyCompletionHandler)
}
public protocol XMPPLogoutDelegate : ObjectiveC.NSObjectProtocol {
  func didReceiveLogout()
}
public protocol XMPPWebLogoutDelegate : ObjectiveC.NSObjectProtocol {
  func didLogoutWeb(socketId: Swift.String)
}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyNetwork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CommonCrypto
import FlyCommon
@_exported import FlyNetwork
import Foundation
import MobileCoreServices
import Network
import SocketIO
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers public class FlyForwardManager : ObjectiveC.NSObject {
  public static let shared: FlyNetwork.FlyForwardManager
  public func postForwardMessage(message: [FlyCommon.ChatMessage], jid: [Swift.String], completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func postForwardRequest(parameter: Foundation.NSMutableArray, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  @objc override dynamic public init()
  @objc deinit
}
public struct HttpMethods {
}
public protocol FlyMediaDelegate : ObjectiveC.NSObjectProtocol {
  func uploadingProgress(percent: Swift.Float, message: FlyCommon.ChatMessage)
  func uploadSucceeded(message: FlyCommon.ChatMessage, response: [Swift.String : Any])
  func uploadWithError(error: Swift.String, messageId: Swift.String)
  func downloadingProgress(percent: Swift.Float, message: FlyCommon.ChatMessage)
  func downloadSucceeded(message: FlyCommon.ChatMessage, fileLocalPath: Swift.String, fileName: Swift.String)
  func downloadWithError(error: Swift.String, messageId: Swift.String)
}
public protocol SocketDelegate {
  func didConnect()
  func onError()
  func didDisconnect()
  func onReconnecting()
}
public protocol WebLoginDelegate {
  func didGetSocketId(data: [Any])
  func didLogin(data: [Any])
}
@objc @_inheritsConvenienceInitializers public class SocketConnection : ObjectiveC.NSObject {
  public var connectionDelegate: FlyNetwork.SocketDelegate?
  public var webLoginDelegate: FlyNetwork.WebLoginDelegate?
  @objc override dynamic public init()
  public func emit(eventName: Swift.String, data: Swift.String)
  public func disConnectFor(eventName: Swift.String)
  public func connect()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MediaManager : ObjectiveC.NSObject {
  public static let shared: FlyNetwork.MediaManager
  public var flyMediaDelegate: FlyNetwork.FlyMediaDelegate?
  @objc override dynamic public init()
  public func uploadFile(message: FlyCommon.ChatMessage)
  public func cancelUploadTask(message: FlyCommon.ChatMessage, sendMessageListener: @escaping (_ isSuccess: Swift.Bool) -> Swift.Void)
  public func downloadFile(message: FlyCommon.ChatMessage, completionHandler: ((Swift.Bool) -> ())? = nil, sendMessageListener: @escaping (_ isSuccess: Swift.Bool, _ error: FlyCommon.FlyError?, _ chatMessage: FlyCommon.ChatMessage?) -> Swift.Void)
  public func refreshToken(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func cancelDownloadTask(message: FlyCommon.ChatMessage, sendMessageListener: @escaping (_ isSuccess: Swift.Bool) -> Swift.Void)
  public func cancelAllTask()
  public func processNextUpload(messageId: Swift.String)
  public func validateAndAppendMedia(message: FlyCommon.ChatMessage)
  public func upload(message: FlyCommon.ChatMessage)
  @objc deinit
}
public protocol FlyNetworkControllerDelegate : ObjectiveC.NSObjectProtocol {
}
@objc @_inheritsConvenienceInitializers public class FlyNetworkController : ObjectiveC.NSObject {
  public var delegate: FlyNetwork.FlyNetworkControllerDelegate?
  @objc override dynamic public init()
  public static let shared: FlyNetwork.FlyNetworkController
  @objc deinit
}
extension FlyNetwork.FlyNetworkController {
  public func registerApiService(uniqueIdentifier: Swift.String, deviceToken: Swift.String, voipDeviceToken: Swift.String, mode: Swift.Bool, isForceRegister: Swift.Bool, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func requestOtpApiService(mobileNumber: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func removeProfileImage(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func uploadMyProfileImage(fileUrl: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func downloadProfileImage(imageUrl: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func contactSync(contactPermission: Swift.Bool, addContacts: [FlyCommon.ContactInfo], deleteContacts: [FlyCommon.ContactInfo], forceDelete: Swift.Bool, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func clearChatRevokeApiService(toUsers: Swift.Dictionary<Swift.String, Swift.String>, starredMessage: Swift.Bool, status: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func clearAllChatRevokeApiService(status: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func deleteForEveryoneMediaRevokeAccessApiService(fileNames: [Swift.String], starredMessage: Swift.Bool, status: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func sendMessageReceivedStatusApiService(userInfo: [Swift.AnyHashable : Any]?, completionHandler: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func logoutApiService(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func sendContactUsInfo(title: Swift.String, description: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func reportMessge(reportMessage: FlyCommon.ReportMessage, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func sendDeleteMyAccontData(reason: Swift.String, feedback: Swift.String, completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func getUsersList(pageNo: Swift.Int, size: Swift.Int, searchTerm: Swift.String = emptyString(), completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func refreshToken(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
  public func getConfigurationSettings(completionHandler: @escaping FlyCommon.FlyCompletionHandler)
}
